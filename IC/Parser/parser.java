
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20140808 (SVN rev 54)
//----------------------------------------------------

package IC.Parser;

import IC.AST.*;
import IC.*;
import java_cup.runtime.*;
import java.util.LinkedList;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20140808 (SVN rev 54) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\004\010\000\002\005\004" +
    "\000\002\005\002\000\002\006\004\000\002\006\004\000" +
    "\002\006\002\000\002\007\006\000\002\010\005\000\002" +
    "\010\002\000\002\011\013\000\002\011\012\000\002\011" +
    "\012\000\002\014\003\000\002\013\003\000\002\013\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\005\000\002\015\003\000\002" +
    "\015\002\000\002\016\004\000\002\016\006\000\002\017" +
    "\004\000\002\017\002\000\002\020\005\000\002\020\007" +
    "\000\002\020\006\000\002\020\004\000\002\020\005\000" +
    "\002\020\010\000\002\020\007\000\002\020\004\000\002" +
    "\020\004\000\002\020\005\000\002\034\004\000\002\034" +
    "\002\000\002\033\003\000\002\033\002\000\002\021\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\006\000" +
    "\002\021\007\000\002\021\005\000\002\021\003\000\002" +
    "\021\003\000\002\021\005\000\002\022\003\000\002\022" +
    "\005\000\002\022\006\000\002\023\003\000\002\024\003" +
    "\000\002\024\003\000\002\025\010\000\002\026\010\000" +
    "\002\026\006\000\002\027\004\000\002\027\002\000\002" +
    "\030\005\000\002\030\002\000\002\031\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\005\000\002\031\005\000" +
    "\002\031\005\000\002\031\005\000\002\031\005\000\002" +
    "\031\005\000\002\031\005\000\002\031\004\000\002\031" +
    "\004\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\006\002\ufffe\040\ufffe\001\002\000\006\002" +
    "\001\040\010\001\002\000\004\002\006\001\002\000\004" +
    "\002\000\001\002\000\006\002\uffff\040\uffff\001\002\000" +
    "\004\006\011\001\002\000\006\034\ufffb\041\012\001\002" +
    "\000\004\006\261\001\002\000\004\034\014\001\002\000" +
    "\020\006\ufff8\035\ufff8\042\ufff8\043\ufff8\044\ufff8\061\ufff8" +
    "\062\ufff8\001\002\000\020\006\025\035\027\042\021\043" +
    "\023\044\022\061\020\062\024\001\002\000\004\005\252" +
    "\001\002\000\020\006\ufff9\035\ufff9\042\ufff9\043\ufff9\044" +
    "\ufff9\061\ufff9\062\ufff9\001\002\000\006\005\uffee\032\uffee" +
    "\001\002\000\014\006\025\043\241\044\022\061\020\062" +
    "\024\001\002\000\006\005\uffed\032\uffed\001\002\000\004" +
    "\005\ufff1\001\002\000\006\005\uffec\032\uffec\001\002\000" +
    "\006\005\uffeb\032\uffeb\001\002\000\020\006\ufffa\035\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\061\ufffa\062\ufffa\001\002\000" +
    "\006\002\ufffd\040\ufffd\001\002\000\006\005\031\032\032" +
    "\001\002\000\010\030\034\036\ufff5\037\ufff5\001\002\000" +
    "\004\033\033\001\002\000\006\005\uffea\032\uffea\001\002" +
    "\000\014\006\025\031\uffe8\044\022\061\020\062\024\001" +
    "\002\000\006\036\037\037\036\001\002\000\004\005\040" +
    "\001\002\000\020\006\ufff7\035\ufff7\042\ufff7\043\ufff7\044" +
    "\ufff7\061\ufff7\062\ufff7\001\002\000\006\036\ufff6\037\ufff6" +
    "\001\002\000\006\005\237\032\032\001\002\000\006\031" +
    "\uffe9\037\234\001\002\000\004\031\044\001\002\000\004" +
    "\034\045\001\002\000\056\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\011\uffe4\014\uffe4\030\uffe4\034\uffe4\035\uffe4\044\uffe4" +
    "\045\uffe4\046\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\001\002" +
    "\000\056\004\066\005\064\006\077\007\073\011\070\014" +
    "\074\030\053\034\051\035\103\044\022\045\056\046\062" +
    "\050\054\051\067\052\050\053\065\054\075\056\061\057" +
    "\071\060\100\061\020\062\024\001\002\000\042\010\uffd5" +
    "\011\uffd5\012\uffd5\013\uffd5\015\uffd5\016\uffd5\017\uffd5\020" +
    "\uffd5\021\uffd5\022\231\023\uffd5\024\uffd5\025\uffd5\026\uffd5" +
    "\027\uffd5\032\uffd5\001\002\000\004\036\230\001\002\000" +
    "\056\004\uffe4\005\uffe4\006\uffe4\007\uffe4\011\uffe4\014\uffe4" +
    "\030\uffe4\034\uffe4\035\uffe4\044\uffe4\045\uffe4\046\uffe4\050" +
    "\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\056\uffe4\057\uffe4" +
    "\060\uffe4\061\uffe4\062\uffe4\001\002\000\040\010\130\011" +
    "\117\012\125\013\121\015\124\016\134\017\122\020\120" +
    "\021\123\023\126\024\116\025\135\026\131\027\133\032" +
    "\132\001\002\000\032\004\066\005\064\006\113\007\073" +
    "\011\070\014\074\030\053\053\065\054\075\056\061\057" +
    "\071\060\100\001\002\000\004\030\220\001\002\000\006" +
    "\005\213\032\032\001\002\000\034\004\066\005\064\006" +
    "\113\007\073\011\070\014\074\030\053\036\uffd6\053\065" +
    "\054\075\056\061\057\071\060\100\001\002\000\050\010" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\015\uffcf\016\uffcf\017\uffcf" +
    "\020\uffcf\021\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\036\uffcf\037\uffcf\001\002" +
    "\000\050\010\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\026\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\036\uffc7\037" +
    "\uffc7\001\002\000\050\010\uffae\011\uffae\012\uffae\013\uffae" +
    "\015\uffae\016\uffae\017\uffae\020\uffae\021\uffae\023\uffae\024" +
    "\uffae\025\uffae\026\uffae\027\uffae\031\uffae\032\uffae\033\uffae" +
    "\036\uffae\037\uffae\001\002\000\004\030\201\001\002\000" +
    "\050\010\uffc8\011\uffc8\012\uffc8\013\uffc8\015\uffc8\016\uffc8" +
    "\017\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8\025\uffc8\026" +
    "\uffc8\027\uffc8\031\uffc8\032\uffc8\033\uffc8\036\uffc8\037\uffc8" +
    "\001\002\000\054\010\uffcc\011\uffcc\012\uffcc\013\uffcc\015" +
    "\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\176\031\uffcc\032" +
    "\uffcc\033\uffcc\036\uffcc\037\uffcc\001\002\000\050\010\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\015\uffd3\016\uffd3\017\uffd3\020" +
    "\uffd3\021\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\031\uffd3\032\uffd3\033\uffd3\036\uffd3\037\uffd3\001\002\000" +
    "\050\010\uffb0\011\uffb0\012\uffb0\013\uffb0\015\uffb0\016\uffb0" +
    "\017\uffb0\020\uffb0\021\uffb0\023\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\031\uffb0\032\uffb0\033\uffb0\036\uffb0\037\uffb0" +
    "\001\002\000\004\036\175\001\002\000\032\004\066\005" +
    "\064\006\113\007\073\011\070\014\074\030\053\053\065" +
    "\054\075\056\061\057\071\060\100\001\002\000\050\010" +
    "\uffad\011\uffad\012\uffad\013\uffad\015\uffad\016\uffad\017\uffad" +
    "\020\uffad\021\uffad\023\uffad\024\uffad\025\uffad\026\uffad\027" +
    "\uffad\031\uffad\032\uffad\033\uffad\036\uffad\037\uffad\001\002" +
    "\000\050\010\uffce\011\uffce\012\uffce\013\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\023\uffce\024\uffce\025\uffce" +
    "\026\uffce\027\uffce\031\uffce\032\uffce\033\uffce\036\uffce\037" +
    "\uffce\001\002\000\050\010\uffaf\011\uffaf\012\uffaf\013\uffaf" +
    "\015\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\023\uffaf\024" +
    "\uffaf\025\uffaf\026\uffaf\027\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\036\uffaf\037\uffaf\001\002\000\032\004\066\005\064\006" +
    "\113\007\073\011\070\014\074\030\053\053\065\054\075" +
    "\056\061\057\071\060\100\001\002\000\012\006\164\044" +
    "\022\061\020\062\024\001\002\000\042\010\uffd4\011\uffd4" +
    "\012\uffd4\013\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\032\uffd4" +
    "\036\uffc9\001\002\000\010\005\uffeb\026\105\032\uffeb\001" +
    "\002\000\050\010\uffac\011\uffac\012\uffac\013\uffac\015\uffac" +
    "\016\uffac\017\uffac\020\uffac\021\uffac\023\uffac\024\uffac\025" +
    "\uffac\026\uffac\027\uffac\031\uffac\032\uffac\033\uffac\036\uffac" +
    "\037\uffac\001\002\000\004\036\104\001\002\000\056\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\011\uffe5\014\uffe5\030\uffe5" +
    "\034\uffe5\035\uffe5\044\uffe5\045\uffe5\046\uffe5\050\uffe5\051" +
    "\uffe5\052\uffe5\053\uffe5\054\uffe5\056\uffe5\057\uffe5\060\uffe5" +
    "\061\uffe5\062\uffe5\001\002\000\020\006\ufff3\035\ufff3\042" +
    "\ufff3\043\ufff3\044\ufff3\061\ufff3\062\ufff3\001\002\000\060" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\011\uffe0\014\uffe0\030" +
    "\uffe0\034\uffe0\035\uffe0\044\uffe0\045\uffe0\046\uffe0\047\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\053\uffe0\054\uffe0\056\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\001\002\000\004\005\106" +
    "\001\002\000\004\030\107\001\002\000\034\004\066\005" +
    "\064\006\113\007\073\011\070\014\074\030\053\031\uffc2" +
    "\053\065\054\075\056\061\057\071\060\100\001\002\000" +
    "\050\010\uffd5\011\uffd5\012\uffd5\013\uffd5\015\uffd5\016\uffd5" +
    "\017\uffd5\020\uffd5\021\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\031\uffd5\032\uffd5\033\uffd5\036\uffd5\037\uffd5" +
    "\001\002\000\044\010\130\011\117\012\125\013\121\015" +
    "\124\016\134\017\122\020\120\021\123\023\126\024\116" +
    "\025\135\026\131\027\133\031\uffc0\032\132\037\uffc0\001" +
    "\002\000\050\010\uffd4\011\uffd4\012\uffd4\013\uffd4\015\uffd4" +
    "\016\uffd4\017\uffd4\020\uffd4\021\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\031\uffd4\032\uffd4\033\uffd4\036\uffd4" +
    "\037\uffd4\001\002\000\004\026\105\001\002\000\004\031" +
    "\115\001\002\000\050\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\036\uffc6\037\uffc6\001\002\000\032\004\066\005\064\006" +
    "\113\007\073\011\070\014\074\030\053\053\065\054\075" +
    "\056\061\057\071\060\100\001\002\000\032\004\066\005" +
    "\064\006\113\007\073\011\070\014\074\030\053\053\065" +
    "\054\075\056\061\057\071\060\100\001\002\000\032\004" +
    "\066\005\064\006\113\007\073\011\070\014\074\030\053" +
    "\053\065\054\075\056\061\057\071\060\100\001\002\000" +
    "\032\004\066\005\064\006\113\007\073\011\070\014\074" +
    "\030\053\053\065\054\075\056\061\057\071\060\100\001" +
    "\002\000\032\004\066\005\064\006\113\007\073\011\070" +
    "\014\074\030\053\053\065\054\075\056\061\057\071\060" +
    "\100\001\002\000\032\004\066\005\064\006\113\007\073" +
    "\011\070\014\074\030\053\053\065\054\075\056\061\057" +
    "\071\060\100\001\002\000\032\004\066\005\064\006\113" +
    "\007\073\011\070\014\074\030\053\053\065\054\075\056" +
    "\061\057\071\060\100\001\002\000\032\004\066\005\064" +
    "\006\113\007\073\011\070\014\074\030\053\053\065\054" +
    "\075\056\061\057\071\060\100\001\002\000\032\004\066" +
    "\005\064\006\113\007\073\011\070\014\074\030\053\053" +
    "\065\054\075\056\061\057\071\060\100\001\002\000\006" +
    "\031\uffc3\037\151\001\002\000\032\004\066\005\064\006" +
    "\113\007\073\011\070\014\074\030\053\053\065\054\075" +
    "\056\061\057\071\060\100\001\002\000\006\005\143\055" +
    "\144\001\002\000\032\004\066\005\064\006\113\007\073" +
    "\011\070\014\074\030\053\053\065\054\075\056\061\057" +
    "\071\060\100\001\002\000\032\004\066\005\064\006\113" +
    "\007\073\011\070\014\074\030\053\053\065\054\075\056" +
    "\061\057\071\060\100\001\002\000\032\004\066\005\064" +
    "\006\113\007\073\011\070\014\074\030\053\053\065\054" +
    "\075\056\061\057\071\060\100\001\002\000\032\004\066" +
    "\005\064\006\113\007\073\011\070\014\074\030\053\053" +
    "\065\054\075\056\061\057\071\060\100\001\002\000\050" +
    "\010\130\011\117\012\125\013\121\015\124\016\134\017" +
    "\122\020\120\021\123\023\126\024\116\025\uffb9\026\131" +
    "\027\133\031\uffb9\032\132\033\uffb9\036\uffb9\037\uffb9\001" +
    "\002\000\050\010\130\011\117\012\125\013\121\015\124" +
    "\016\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\026\131\027\uffb6\031\uffb6\032\132\033\uffb6\036\uffb6" +
    "\037\uffb6\001\002\000\050\010\130\011\117\012\125\013" +
    "\121\015\124\016\134\017\122\020\120\021\123\023\uffb3" +
    "\024\uffb3\025\uffb3\026\131\027\uffb3\031\uffb3\032\132\033" +
    "\uffb3\036\uffb3\037\uffb3\001\002\000\042\010\130\011\117" +
    "\012\125\013\121\015\124\016\134\017\122\020\120\021" +
    "\123\023\126\024\116\025\135\026\131\027\133\032\132" +
    "\033\142\001\002\000\052\010\uffca\011\uffca\012\uffca\013" +
    "\uffca\015\uffca\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca" +
    "\023\uffca\024\uffca\025\uffca\026\uffca\027\uffca\031\uffca\032" +
    "\uffca\033\uffca\036\uffca\037\uffca\001\002\000\054\010\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\015\uffcb\016\uffcb\017\uffcb\020" +
    "\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\145\031\uffcb\032\uffcb\033\uffcb\036\uffcb\037" +
    "\uffcb\001\002\000\050\010\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\015\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0" +
    "\036\uffd0\037\uffd0\001\002\000\034\004\066\005\064\006" +
    "\113\007\073\011\070\014\074\030\053\031\uffc2\053\065" +
    "\054\075\056\061\057\071\060\100\001\002\000\004\031" +
    "\147\001\002\000\050\010\uffc5\011\uffc5\012\uffc5\013\uffc5" +
    "\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\036\uffc5\037\uffc5\001\002\000\050\010\uffbf\011\uffbf\012" +
    "\125\013\121\015\124\016\uffbf\017\uffbf\020\uffbf\021\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\131\027\uffbf\031\uffbf\032" +
    "\132\033\uffbf\036\uffbf\037\uffbf\001\002\000\032\004\066" +
    "\005\064\006\113\007\073\011\070\014\074\030\053\053" +
    "\065\054\075\056\061\057\071\060\100\001\002\000\044" +
    "\010\130\011\117\012\125\013\121\015\124\016\134\017" +
    "\122\020\120\021\123\023\126\024\116\025\135\026\131" +
    "\027\133\031\uffc1\032\132\037\uffc1\001\002\000\050\010" +
    "\130\011\117\012\125\013\121\015\124\016\134\017\122" +
    "\020\120\021\123\023\uffb4\024\uffb4\025\uffb4\026\131\027" +
    "\uffb4\031\uffb4\032\132\033\uffb4\036\uffb4\037\uffb4\001\002" +
    "\000\050\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\026\131\027\uffbd\031\uffbd\032\132\033\uffbd\036\uffbd\037" +
    "\uffbd\001\002\000\050\010\uffbb\011\uffbb\012\uffbb\013\uffbb" +
    "\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\131\027\uffbb\031\uffbb\032\132\033\uffbb" +
    "\036\uffbb\037\uffbb\001\002\000\050\010\130\011\117\012" +
    "\125\013\121\015\124\016\uffb7\017\uffb7\020\uffb7\021\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\026\131\027\uffb7\031\uffb7\032" +
    "\132\033\uffb7\036\uffb7\037\uffb7\001\002\000\050\010\130" +
    "\011\117\012\125\013\121\015\124\016\uffb5\017\uffb5\020" +
    "\uffb5\021\uffb5\023\uffb5\024\uffb5\025\uffb5\026\131\027\uffb5" +
    "\031\uffb5\032\132\033\uffb5\036\uffb5\037\uffb5\001\002\000" +
    "\050\010\uffbc\011\uffbc\012\uffbc\013\uffbc\015\uffbc\016\uffbc" +
    "\017\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc\025\uffbc\026" +
    "\131\027\uffbc\031\uffbc\032\132\033\uffbc\036\uffbc\037\uffbc" +
    "\001\002\000\050\010\130\011\117\012\125\013\121\015" +
    "\124\016\uffb8\017\uffb8\020\uffb8\021\uffb8\023\uffb8\024\uffb8" +
    "\025\uffb8\026\131\027\uffb8\031\uffb8\032\132\033\uffb8\036" +
    "\uffb8\037\uffb8\001\002\000\050\010\uffbe\011\uffbe\012\125" +
    "\013\121\015\124\016\uffbe\017\uffbe\020\uffbe\021\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\131\027\uffbe\031\uffbe\032\132" +
    "\033\uffbe\036\uffbe\037\uffbe\001\002\000\050\010\130\011" +
    "\117\012\125\013\121\015\124\016\134\017\122\020\120" +
    "\021\123\023\126\024\uffba\025\uffba\026\131\027\133\031" +
    "\uffba\032\132\033\uffba\036\uffba\037\uffba\001\002\000\006" +
    "\030\171\032\uffeb\001\002\000\004\032\166\001\002\000" +
    "\034\004\066\005\064\006\113\007\073\011\070\014\074" +
    "\030\053\033\033\053\065\054\075\056\061\057\071\060" +
    "\100\001\002\000\042\010\130\011\117\012\125\013\121" +
    "\015\124\016\134\017\122\020\120\021\123\023\126\024" +
    "\116\025\135\026\131\027\133\032\132\033\170\001\002" +
    "\000\050\010\uffd1\011\uffd1\012\uffd1\013\uffd1\015\uffd1\016" +
    "\uffd1\017\uffd1\020\uffd1\021\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\031\uffd1\032\uffd1\033\uffd1\036\uffd1\037" +
    "\uffd1\001\002\000\004\031\172\001\002\000\050\010\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2" +
    "\031\uffd2\032\uffd2\033\uffd2\036\uffd2\037\uffd2\001\002\000" +
    "\050\010\uffb2\011\uffb2\012\uffb2\013\uffb2\015\uffb2\016\uffb2" +
    "\017\uffb2\020\uffb2\021\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\131\027\uffb2\031\uffb2\032\132\033\uffb2\036\uffb2\037\uffb2" +
    "\001\002\000\050\010\uffb1\011\uffb1\012\uffb1\013\uffb1\015" +
    "\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\023\uffb1\024\uffb1" +
    "\025\uffb1\026\131\027\uffb1\031\uffb1\032\132\033\uffb1\036" +
    "\uffb1\037\uffb1\001\002\000\060\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\011\uffdc\014\uffdc\030\uffdc\034\uffdc\035\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062" +
    "\uffdc\001\002\000\034\004\066\005\064\006\113\007\073" +
    "\011\070\014\074\030\053\031\uffc2\053\065\054\075\056" +
    "\061\057\071\060\100\001\002\000\004\031\200\001\002" +
    "\000\050\010\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\021\uffc4\023\uffc4\024\uffc4\025\uffc4" +
    "\026\uffc4\027\uffc4\031\uffc4\032\uffc4\033\uffc4\036\uffc4\037" +
    "\uffc4\001\002\000\032\004\066\005\064\006\113\007\073" +
    "\011\070\014\074\030\053\053\065\054\075\056\061\057" +
    "\071\060\100\001\002\000\042\010\130\011\117\012\125" +
    "\013\121\015\124\016\134\017\122\020\120\021\123\023" +
    "\126\024\116\025\135\026\131\027\133\031\203\032\132" +
    "\001\002\000\054\004\066\005\064\006\077\007\073\011" +
    "\070\014\074\030\053\034\051\044\022\045\056\046\062" +
    "\050\054\051\067\052\050\053\065\054\075\056\061\057" +
    "\071\060\100\061\020\062\024\001\002\000\060\004\uffd8" +
    "\005\uffd8\006\uffd8\007\uffd8\011\uffd8\014\uffd8\030\uffd8\034" +
    "\uffd8\035\uffd8\044\uffd8\045\uffd8\046\uffd8\047\205\050\uffd8" +
    "\051\uffd8\052\uffd8\053\uffd8\054\uffd8\056\uffd8\057\uffd8\060" +
    "\uffd8\061\uffd8\062\uffd8\001\002\000\054\004\066\005\064" +
    "\006\077\007\073\011\070\014\074\030\053\034\051\044" +
    "\022\045\056\046\062\050\054\051\067\052\050\053\065" +
    "\054\075\056\061\057\071\060\100\061\020\062\024\001" +
    "\002\000\060\004\uffde\005\uffde\006\uffde\007\uffde\011\uffde" +
    "\014\uffde\030\uffde\034\uffde\035\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\052\uffde\053\uffde\054\uffde" +
    "\056\uffde\057\uffde\060\uffde\061\uffde\062\uffde\001\002\000" +
    "\060\004\uffd9\005\uffd9\006\uffd9\007\uffd9\011\uffd9\014\uffd9" +
    "\030\uffd9\034\uffd9\035\uffd9\044\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\056\uffd9" +
    "\057\uffd9\060\uffd9\061\uffd9\062\uffd9\001\002\000\042\010" +
    "\130\011\117\012\125\013\121\015\124\016\134\017\122" +
    "\020\120\021\123\023\126\024\116\025\135\026\131\027" +
    "\133\032\132\036\uffd7\001\002\000\004\036\212\001\002" +
    "\000\060\004\uffdf\005\uffdf\006\uffdf\007\uffdf\011\uffdf\014" +
    "\uffdf\030\uffdf\034\uffdf\035\uffdf\044\uffdf\045\uffdf\046\uffdf" +
    "\047\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\056" +
    "\uffdf\057\uffdf\060\uffdf\061\uffdf\062\uffdf\001\002\000\006" +
    "\022\214\036\215\001\002\000\032\004\066\005\064\006" +
    "\113\007\073\011\070\014\074\030\053\053\065\054\075" +
    "\056\061\057\071\060\100\001\002\000\060\004\uffe3\005" +
    "\uffe3\006\uffe3\007\uffe3\011\uffe3\014\uffe3\030\uffe3\034\uffe3" +
    "\035\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051" +
    "\uffe3\052\uffe3\053\uffe3\054\uffe3\056\uffe3\057\uffe3\060\uffe3" +
    "\061\uffe3\062\uffe3\001\002\000\042\010\130\011\117\012" +
    "\125\013\121\015\124\016\134\017\122\020\120\021\123" +
    "\023\126\024\116\025\135\026\131\027\133\032\132\036" +
    "\217\001\002\000\060\004\uffe2\005\uffe2\006\uffe2\007\uffe2" +
    "\011\uffe2\014\uffe2\030\uffe2\034\uffe2\035\uffe2\044\uffe2\045" +
    "\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\062\uffe2\001" +
    "\002\000\032\004\066\005\064\006\113\007\073\011\070" +
    "\014\074\030\053\053\065\054\075\056\061\057\071\060" +
    "\100\001\002\000\042\010\130\011\117\012\125\013\121" +
    "\015\124\016\134\017\122\020\120\021\123\023\126\024" +
    "\116\025\135\026\131\027\133\031\222\032\132\001\002" +
    "\000\054\004\066\005\064\006\077\007\073\011\070\014" +
    "\074\030\053\034\051\044\022\045\056\046\062\050\054" +
    "\051\067\052\050\053\065\054\075\056\061\057\071\060" +
    "\100\061\020\062\024\001\002\000\060\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\011\uffdd\014\uffdd\030\uffdd\034\uffdd\035" +
    "\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd" +
    "\052\uffdd\053\uffdd\054\uffdd\056\uffdd\057\uffdd\060\uffdd\061" +
    "\uffdd\062\uffdd\001\002\000\042\010\130\011\117\012\125" +
    "\013\121\015\124\016\134\017\122\020\120\021\123\023" +
    "\126\024\116\025\135\026\131\027\133\031\225\032\132" +
    "\001\002\000\050\010\uffcd\011\uffcd\012\uffcd\013\uffcd\015" +
    "\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\023\uffcd\024\uffcd" +
    "\025\uffcd\026\uffcd\027\uffcd\031\uffcd\032\uffcd\033\uffcd\036" +
    "\uffcd\037\uffcd\001\002\000\056\004\066\005\064\006\077" +
    "\007\073\011\070\014\074\030\053\034\051\035\227\044" +
    "\022\045\056\046\062\050\054\051\067\052\050\053\065" +
    "\054\075\056\061\057\071\060\100\061\020\062\024\001" +
    "\002\000\060\004\uffda\005\uffda\006\uffda\007\uffda\011\uffda" +
    "\014\uffda\030\uffda\034\uffda\035\uffda\044\uffda\045\uffda\046" +
    "\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054\uffda" +
    "\056\uffda\057\uffda\060\uffda\061\uffda\062\uffda\001\002\000" +
    "\060\004\uffdb\005\uffdb\006\uffdb\007\uffdb\011\uffdb\014\uffdb" +
    "\030\uffdb\034\uffdb\035\uffdb\044\uffdb\045\uffdb\046\uffdb\047" +
    "\uffdb\050\uffdb\051\uffdb\052\uffdb\053\uffdb\054\uffdb\056\uffdb" +
    "\057\uffdb\060\uffdb\061\uffdb\062\uffdb\001\002\000\032\004" +
    "\066\005\064\006\113\007\073\011\070\014\074\030\053" +
    "\053\065\054\075\056\061\057\071\060\100\001\002\000" +
    "\042\010\130\011\117\012\125\013\121\015\124\016\134" +
    "\017\122\020\120\021\123\023\126\024\116\025\135\026" +
    "\131\027\133\032\132\036\233\001\002\000\060\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\011\uffe1\014\uffe1\030\uffe1\034" +
    "\uffe1\035\uffe1\044\uffe1\045\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\054\uffe1\056\uffe1\057\uffe1\060" +
    "\uffe1\061\uffe1\062\uffe1\001\002\000\012\006\025\044\022" +
    "\061\020\062\024\001\002\000\006\005\236\032\032\001" +
    "\002\000\006\031\uffe6\037\uffe6\001\002\000\006\031\uffe7" +
    "\037\uffe7\001\002\000\006\005\uffef\032\032\001\002\000" +
    "\004\005\ufff0\001\002\000\004\005\243\001\002\000\004" +
    "\030\244\001\002\000\014\006\025\031\uffe8\044\022\061" +
    "\020\062\024\001\002\000\004\031\246\001\002\000\004" +
    "\034\247\001\002\000\056\004\uffe4\005\uffe4\006\uffe4\007" +
    "\uffe4\011\uffe4\014\uffe4\030\uffe4\034\uffe4\035\uffe4\044\uffe4" +
    "\045\uffe4\046\uffe4\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054" +
    "\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\001\002" +
    "\000\056\004\066\005\064\006\077\007\073\011\070\014" +
    "\074\030\053\034\051\035\251\044\022\045\056\046\062" +
    "\050\054\051\067\052\050\053\065\054\075\056\061\057" +
    "\071\060\100\061\020\062\024\001\002\000\020\006\ufff4" +
    "\035\ufff4\042\ufff4\043\ufff4\044\ufff4\061\ufff4\062\ufff4\001" +
    "\002\000\004\030\253\001\002\000\014\006\025\031\uffe8" +
    "\044\022\061\020\062\024\001\002\000\004\031\255\001" +
    "\002\000\004\034\256\001\002\000\056\004\uffe4\005\uffe4" +
    "\006\uffe4\007\uffe4\011\uffe4\014\uffe4\030\uffe4\034\uffe4\035" +
    "\uffe4\044\uffe4\045\uffe4\046\uffe4\050\uffe4\051\uffe4\052\uffe4" +
    "\053\uffe4\054\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062" +
    "\uffe4\001\002\000\056\004\066\005\064\006\077\007\073" +
    "\011\070\014\074\030\053\034\051\035\260\044\022\045" +
    "\056\046\062\050\054\051\067\052\050\053\065\054\075" +
    "\056\061\057\071\060\100\061\020\062\024\001\002\000" +
    "\020\006\ufff2\035\ufff2\042\ufff2\043\ufff2\044\ufff2\061\ufff2" +
    "\062\ufff2\001\002\000\004\034\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\257\000\006\002\004\003\003\001\001\000\004\004" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\014\001\001" +
    "\000\012\007\025\011\016\012\027\014\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\237\013\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\040" +
    "\015\042\016\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\045\001\001\000\026\012\054\020\101\021\051" +
    "\022\046\023\100\024\075\025\062\026\057\031\056\032" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\225\001\001\000\002\001\001\000\020\021\223\022" +
    "\107\024\111\025\062\026\057\031\056\032\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\207\022" +
    "\107\024\111\025\062\026\057\031\056\032\071\033\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\021\173\022\107\024\111\025\062\026\057\031\056" +
    "\032\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\021\172\022\107\024\111\025\062" +
    "\026\057\031\056\032\071\001\001\000\004\012\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\021\110\022\107\024\111\025\062\026\057\027\113\031" +
    "\056\032\071\001\001\000\002\001\001\000\004\030\126" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\021\162\022\107\024\111" +
    "\025\062\026\057\031\056\032\071\001\001\000\020\021" +
    "\161\022\107\024\111\025\062\026\057\031\056\032\071" +
    "\001\001\000\020\021\160\022\107\024\111\025\062\026" +
    "\057\031\056\032\071\001\001\000\020\021\157\022\107" +
    "\024\111\025\062\026\057\031\056\032\071\001\001\000" +
    "\020\021\156\022\107\024\111\025\062\026\057\031\056" +
    "\032\071\001\001\000\020\021\155\022\107\024\111\025" +
    "\062\026\057\031\056\032\071\001\001\000\020\021\154" +
    "\022\107\024\111\025\062\026\057\031\056\032\071\001" +
    "\001\000\020\021\153\022\107\024\111\025\062\026\057" +
    "\031\056\032\071\001\001\000\020\021\152\022\107\024" +
    "\111\025\062\026\057\031\056\032\071\001\001\000\002" +
    "\001\001\000\020\021\147\022\107\024\111\025\062\026" +
    "\057\031\056\032\071\001\001\000\002\001\001\000\020" +
    "\021\140\022\107\024\111\025\062\026\057\031\056\032" +
    "\071\001\001\000\020\021\137\022\107\024\111\025\062" +
    "\026\057\031\056\032\071\001\001\000\020\021\136\022" +
    "\107\024\111\025\062\026\057\031\056\032\071\001\001" +
    "\000\020\021\135\022\107\024\111\025\062\026\057\031" +
    "\056\032\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\021\110\022\107" +
    "\024\111\025\062\026\057\027\145\031\056\032\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\021\151\022\107\024\111\025\062\026\057\031" +
    "\056\032\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\021\166\022\107\024\111\025\062\026\057" +
    "\031\056\032\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\021\110\022" +
    "\107\024\111\025\062\026\057\027\176\031\056\032\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\021" +
    "\201\022\107\024\111\025\062\026\057\031\056\032\071" +
    "\001\001\000\002\001\001\000\026\012\054\020\203\021" +
    "\051\022\046\023\100\024\075\025\062\026\057\031\056" +
    "\032\071\001\001\000\004\034\205\001\001\000\026\012" +
    "\054\020\206\021\051\022\046\023\100\024\075\025\062" +
    "\026\057\031\056\032\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\021\215\022\107\024" +
    "\111\025\062\026\057\031\056\032\071\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\021" +
    "\220\022\107\024\111\025\062\026\057\031\056\032\071" +
    "\001\001\000\002\001\001\000\026\012\054\020\222\021" +
    "\051\022\046\023\100\024\075\025\062\026\057\031\056" +
    "\032\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\012\054\020\101\021\051\022\046" +
    "\023\100\024\075\025\062\026\057\031\056\032\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\021\231" +
    "\022\107\024\111\025\062\026\057\031\056\032\071\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\040\015\244\016\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\247" +
    "\001\001\000\026\012\054\020\101\021\051\022\046\023" +
    "\100\024\075\025\062\026\057\031\056\032\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\040\015" +
    "\253\016\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\256\001\001\000\026\012\054\020\101\021" +
    "\051\022\046\023\100\024\075\025\062\026\057\031\056" +
    "\032\071\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	/** Causes the parser to print every token it reads.
	 * This is useful for debugging.
	 */
//	public boolean printTokens = true;
	
	private Lexer lexer;
	private List<String> sortedlst = new LinkedList<String>();

	public parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	// we can use it to get the line number of current token
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	// we can use it to get the column number of current token
	public int getColumn() {
		return lexer.getColumnNumber();
	}
	
	public static String parseString(String str) {
		StringBuffer sb = new StringBuffer();
		boolean writeChar = false;
		int n = str.length();
		for (int j = 1; j <= n - 2; j++) {
			char c = str.charAt(j);
			if (writeChar) {
				if (c == 'n')
					sb.append("\n");
				else if (c == 't')
					sb.append("\t");
				else
					sb.append(c);
				
				writeChar = false;
			} else if (c != '\\') {
				sb.append(c);
			} else { // else str.charAt(j) == '\\'
				writeChar = true;
			}
		}
		return sb.toString();
	}
	
	public void unrecovered_syntax_error(Symbol s) throws SyntaxError {
		Token tok = (Token) s;
		StringBuffer sb = new StringBuffer();
		
		java.util.Collections.sort(sortedlst);
		
		if (!sortedlst.isEmpty()) {
			boolean firstStr = true;
			for (String str : sortedlst) {
				if (firstStr) {
					firstStr = false;
					sb.append("'" + Token.convertTag(str) + "'");
				} else {
					sb.append(" or '" + Token.convertTag(str) + "'");
				}
			}
		}
		String errMsg = "expected " + sb.toString() + ", but found '" + tok.getValue() + "'";
		throw new SyntaxError(errMsg,tok.getLine(),tok.getColumn());
	}
	
	public void syntax_error(Symbol s) {
		List<Integer> expectedTags = expected_token_ids();
		for (Integer n : expectedTags)
			sortedlst.add(sym.terminalNames[n]);
		
		// sort sortedlst lexicographically
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= class_list 
            {
              Program RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<ICClass> cl = (List<ICClass>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Program(cl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_list ::= class_list classDecl 
            {
              List<ICClass> RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<ICClass> cl = (List<ICClass>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ICClass c = (ICClass)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 cl.add(c); RESULT = cl; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_list ::= 
            {
              List<ICClass> RESULT =null;
		 RESULT = new LinkedList<ICClass>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("class_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // classDecl ::= CLASS CLASS_ID optionalExtends LCBR fieldsnmethods RCBR 
            {
              ICClass RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String ext = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldsOrMethods x = (FieldsOrMethods)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			if(ext != null)
				RESULT = new ICClass(cleft, c, ext, x.getFields(), x.getMethods());
			else
				RESULT = new ICClass(cleft, c, x.getFields(), x.getMethods());
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("classDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // optionalExtends ::= EXTENDS CLASS_ID 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalExtends",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // optionalExtends ::= 
            {
              String RESULT =null;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalExtends",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fieldsnmethods ::= fieldsnmethods fields 
            {
              FieldsOrMethods RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldsOrMethods lst = (FieldsOrMethods)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Field> c = (List<Field>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lst.add(c); RESULT = lst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldsnmethods",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fieldsnmethods ::= fieldsnmethods method 
            {
              FieldsOrMethods RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FieldsOrMethods lst = (FieldsOrMethods)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Method c = (Method)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lst.add(c); RESULT = lst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldsnmethods",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fieldsnmethods ::= 
            {
              FieldsOrMethods RESULT =null;
		 RESULT = new FieldsOrMethods(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fieldsnmethods",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // fields ::= type ID optionalFields SEMI 
            {
              List<Field> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<String> f = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			f.add(0,i);
			RESULT = new LinkedList<Field>();
			for (String s : f)
				RESULT.add(new Field(t,s));;
		
              CUP$parser$result = parser.getSymbolFactory().newSymbol("fields",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // optionalFields ::= optionalFields COMMA ID 
            {
              List<String> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<String> f = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 f.add(i); RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalFields",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // optionalFields ::= 
            {
              List<String> RESULT =null;
		 RESULT = new LinkedList<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalFields",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // method ::= STATIC typenvoid ID LP formalsList RP LCBR stmt_list RCBR 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StaticMethod(t,i,f,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // method ::= type ID LP formalsList RP LCBR stmt_list RCBR 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VirtualMethod(t,i,f,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // method ::= virtualvoid ID LP formalsList RP LCBR stmt_list RCBR 
            {
              Method RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> s = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VirtualMethod(t,i,f,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("method",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // virtualvoid ::= VOID 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveType(getLine(),DataTypes.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtualvoid",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // typenvoid ::= VOID 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveType(getLine(),DataTypes.VOID); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typenvoid",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // typenvoid ::= type 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typenvoid",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type ::= INT 
            {
              Type RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveType(getLine(),DataTypes.INT); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type ::= BOOLEAN 
            {
              Type RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveType(getLine(),DataTypes.BOOLEAN); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // type ::= STRING 
            {
              Type RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PrimitiveType(getLine(),DataTypes.STRING); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // type ::= CLASS_ID 
            {
              Type RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UserType(getLine(),c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // type ::= type LB RB 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 t.incrementDimension(); RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formalsList ::= formals 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formalsList ::= 
            {
              List<Formal> RESULT =null;
		 RESULT = new LinkedList<Formal>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formalsList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formals ::= type ID 
            {
              List<Formal> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LinkedList<Formal>(); RESULT.add(new Formal(t,i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // formals ::= formals COMMA type ID 
            {
              List<Formal> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Formal> f = (List<Formal>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 f.add(new Formal(t,i)); RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formals",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmt_list ::= stmt_list stmt 
            {
              List<Statement> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> lst = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lst.add(s); RESULT = lst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt_list ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new LinkedList<Statement>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= type ID SEMI 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LocalVariable(t,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= type ID EQ expr SEMI 
            {
              Statement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LocalVariable(t,i,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= location EQ expr SEMI 
            {
              Statement RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assignment(l,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= callStatement SEMI 
            {
              Statement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallStatement c = (CallStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= RETURN optionalReturnValue SEMI 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression or = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Return(ileft,or); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= IF LP expr RP stmt optionalElse 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement e = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(cond,s,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= WHILE LP expr RP stmt 
            {
              Statement RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(cond,s) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= BREAK SEMI 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Break(ileft) ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= CONTINUE SEMI 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Continue(ileft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= LCBR stmt_list RCBR 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Statement> sl = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StatementsBlock(ileft,sl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // optionalElse ::= ELSE stmt 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalElse",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // optionalElse ::= 
            {
              Statement RESULT =null;
		 RESULT = null ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalElse",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // optionalReturnValue ::= expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalReturnValue",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // optionalReturnValue ::= 
            {
              Expression RESULT =null;
		 RESULT = null ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("optionalReturnValue",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= location 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Location l = (Location)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= call 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= THIS 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new This(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= NEW CLASS_ID LP RP 
            {
              Expression RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new NewClass(cleft,c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= NEW type LB expr RB 
            {
              Expression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewArray(t,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= expr DOT LENGTH 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Length(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr_op 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= literal 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= LP expr RP 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExpressionBlock(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // location ::= ID 
            {
              Location RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableLocation(ileft,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // location ::= expr DOT ID 
            {
              Location RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VariableLocation(ileft,e,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // location ::= expr LB expr RB 
            {
              Location RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayLocation(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("location",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // callStatement ::= call 
            {
              CallStatement RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Call c = (Call)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CallStatement(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("callStatement",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // call ::= staticCall 
            {
              Call RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StaticCall s = (StaticCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // call ::= virtualCall 
            {
              Call RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VirtualCall v = (VirtualCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = v; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("call",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // staticCall ::= CLASS_ID DOT ID LP expr_args RP 
            {
              StaticCall RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StaticCall(ileft,c,i,args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("staticCall",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // virtualCall ::= expr DOT ID LP expr_args RP 
            {
              VirtualCall RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VirtualCall(ileft,e,i,args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtualCall",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // virtualCall ::= ID LP expr_args RP 
            {
              VirtualCall RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Expression> args = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VirtualCall(ileft,i,args); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("virtualCall",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_args ::= expr expr_comma 
            {
              List<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Expression> lst = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lst.add(0, e); RESULT = lst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_args",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_args ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new LinkedList<Expression>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_args",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_comma ::= expr_comma COMMA expr 
            {
              List<Expression> RESULT =null;
		int lstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Expression> lst = (List<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lst.add(e); RESULT = lst; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_comma",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_comma ::= 
            {
              List<Expression> RESULT =null;
		 RESULT = new LinkedList<Expression>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_comma",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_op ::= expr PLUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.PLUS, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_op ::= expr MINUS expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.MINUS, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_op ::= expr MULTIPLY expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.MULTIPLY, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_op ::= expr DIVIDE expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.DIVIDE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_op ::= expr REMAINDER expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathBinaryOp(e1, BinaryOps.MOD, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_op ::= expr AND expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.LAND, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr_op ::= expr OR expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.LOR, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_op ::= expr SMALL expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.LT, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_op ::= expr SMALLEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.LTE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_op ::= expr BIG expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.GT, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_op ::= expr BIGEQ expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.GTE, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_op ::= expr EQCOMP expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.EQUAL, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_op ::= expr NOTEQCOMP expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalBinaryOp(e1, BinaryOps.NEQUAL, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_op ::= NEGATION expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LogicalUnaryOp(UnaryOps.LNEG, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr_op ::= MINUS expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MathUnaryOp(UnaryOps.UMINUS, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_op",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= NUM 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(nleft, LiteralTypes.INTEGER, n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= STR 
            {
              Literal RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(sleft, LiteralTypes.STRING, parseString(s)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal ::= TRUE 
            {
              Literal RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(tleft, LiteralTypes.TRUE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // literal ::= FALSE 
            {
              Literal RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(fleft, LiteralTypes.FALSE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // literal ::= NULL 
            {
              Literal RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(nleft, LiteralTypes.NULL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
