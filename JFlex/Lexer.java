/* The following code was generated by JFlex 1.6.0 */

/* JFlex example: part of Java language lexer specification */
package JFlex;

import java_cup.runtime.*;
import iCCompiler.*;

/**
* This class is a simple example lexer.
*/


public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\3\0"+
    "\1\7\3\0\1\13\1\14\1\5\1\44\1\0\1\45\1\0\1\4"+
    "\1\11\11\12\1\15\1\16\1\0\1\43\3\0\32\10\1\0\1\46"+
    "\2\0\1\7\1\0\1\21\1\33\1\17\1\27\1\23\1\37\1\35"+
    "\1\41\1\30\1\6\1\42\1\20\1\6\1\26\1\32\2\6\1\34"+
    "\1\22\1\25\1\36\1\31\1\40\1\24\2\6\4\0\41\7\2\0"+
    "\4\7\4\0\1\7\2\0\1\7\7\0\1\7\4\0\1\7\5\0"+
    "\27\7\1\0\37\7\1\0\u01ca\7\4\0\14\7\16\0\5\7\7\0"+
    "\1\7\1\0\1\7\21\0\165\7\1\0\2\7\2\0\4\7\10\0"+
    "\1\7\1\0\3\7\1\0\1\7\1\0\24\7\1\0\123\7\1\0"+
    "\213\7\1\0\5\7\2\0\236\7\11\0\46\7\2\0\1\7\7\0"+
    "\47\7\11\0\55\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\1\7\10\0\33\7\5\0\3\7\15\0\4\7\7\0\1\7\4\0"+
    "\13\7\5\0\112\7\4\0\146\7\1\0\11\7\1\0\12\7\1\0"+
    "\23\7\2\0\1\7\17\0\74\7\2\0\145\7\16\0\66\7\4\0"+
    "\1\7\5\0\56\7\22\0\34\7\244\0\144\7\2\0\12\7\1\0"+
    "\7\7\1\0\7\7\1\0\3\7\1\0\10\7\2\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\1\7\3\0\4\7\2\0\11\7\2\0"+
    "\2\7\2\0\4\7\10\0\1\7\4\0\2\7\1\0\5\7\2\0"+
    "\16\7\7\0\1\7\5\0\3\7\1\0\6\7\4\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0"+
    "\4\7\1\0\1\7\7\0\20\7\13\0\3\7\1\0\11\7\1\0"+
    "\3\7\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0"+
    "\12\7\1\0\3\7\1\0\3\7\2\0\1\7\17\0\4\7\2\0"+
    "\12\7\1\0\1\7\17\0\3\7\1\0\10\7\2\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\11\7\2\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\7\1\0\5\7\2\0"+
    "\12\7\1\0\1\7\20\0\2\7\1\0\6\7\3\0\3\7\1\0"+
    "\4\7\3\0\2\7\1\0\1\7\1\0\2\7\3\0\2\7\3\0"+
    "\3\7\3\0\14\7\4\0\5\7\3\0\3\7\1\0\4\7\2\0"+
    "\1\7\6\0\1\7\16\0\12\7\11\0\1\7\7\0\3\7\1\0"+
    "\10\7\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\3\0"+
    "\10\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0\2\7\6\0"+
    "\4\7\2\0\12\7\22\0\2\7\1\0\10\7\1\0\3\7\1\0"+
    "\27\7\1\0\12\7\1\0\5\7\2\0\11\7\1\0\3\7\1\0"+
    "\4\7\7\0\2\7\7\0\1\7\1\0\4\7\2\0\12\7\1\0"+
    "\2\7\17\0\2\7\1\0\10\7\1\0\3\7\1\0\51\7\2\0"+
    "\10\7\1\0\3\7\1\0\5\7\10\0\1\7\10\0\4\7\2\0"+
    "\12\7\12\0\6\7\2\0\2\7\1\0\22\7\3\0\30\7\1\0"+
    "\11\7\1\0\1\7\2\0\7\7\3\0\1\7\4\0\6\7\1\0"+
    "\1\7\1\0\10\7\22\0\2\7\15\0\72\7\4\0\20\7\1\0"+
    "\12\7\47\0\2\7\1\0\1\7\2\0\2\7\1\0\1\7\2\0"+
    "\1\7\6\0\4\7\1\0\7\7\1\0\3\7\1\0\1\7\1\0"+
    "\1\7\2\0\2\7\1\0\15\7\1\0\3\7\2\0\5\7\1\0"+
    "\1\7\1\0\6\7\2\0\12\7\2\0\2\7\42\0\1\7\27\0"+
    "\2\7\6\0\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0"+
    "\12\7\1\0\44\7\4\0\24\7\1\0\22\7\1\0\44\7\11\0"+
    "\1\7\71\0\112\7\6\0\116\7\2\0\46\7\12\0\53\7\1\0"+
    "\1\7\3\0\u0149\7\1\0\4\7\2\0\7\7\1\0\1\7\1\0"+
    "\4\7\2\0\51\7\1\0\4\7\2\0\41\7\1\0\4\7\2\0"+
    "\7\7\1\0\1\7\1\0\4\7\2\0\17\7\1\0\71\7\1\0"+
    "\4\7\2\0\103\7\2\0\3\7\40\0\20\7\20\0\125\7\14\0"+
    "\u026c\7\2\0\21\7\1\0\32\7\5\0\113\7\3\0\3\7\17\0"+
    "\15\7\1\0\7\7\13\0\25\7\13\0\24\7\14\0\15\7\1\0"+
    "\3\7\1\0\2\7\14\0\124\7\3\0\1\7\3\0\3\7\2\0"+
    "\12\7\41\0\3\7\2\0\12\7\6\0\130\7\10\0\53\7\5\0"+
    "\106\7\12\0\35\7\3\0\14\7\4\0\14\7\12\0\50\7\2\0"+
    "\5\7\13\0\54\7\4\0\32\7\6\0\12\7\46\0\34\7\4\0"+
    "\77\7\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\7\130\0"+
    "\114\7\4\0\12\7\21\0\11\7\14\0\53\7\3\0\14\7\6\0"+
    "\64\7\14\0\70\7\10\0\12\7\3\0\61\7\122\0\3\7\1\0"+
    "\37\7\15\0\347\7\25\0\u011a\7\2\0\6\7\2\0\46\7\2\0"+
    "\6\7\2\0\10\7\1\0\1\7\1\0\1\7\1\0\1\7\1\0"+
    "\37\7\2\0\65\7\1\0\7\7\1\0\1\7\3\0\3\7\1\0"+
    "\7\7\3\0\4\7\2\0\6\7\4\0\15\7\5\0\3\7\1\0"+
    "\7\7\16\0\5\7\32\0\5\7\20\0\2\7\23\0\1\7\13\0"+
    "\5\7\5\0\6\7\1\0\1\7\15\0\1\7\20\0\15\7\3\0"+
    "\32\7\26\0\15\7\4\0\1\7\3\0\14\7\21\0\1\7\4\0"+
    "\1\7\2\0\12\7\1\0\1\7\3\0\5\7\6\0\1\7\1\0"+
    "\1\7\1\0\1\7\1\0\4\7\1\0\13\7\2\0\4\7\5\0"+
    "\5\7\4\0\1\7\21\0\51\7\u0a77\0\57\7\1\0\57\7\1\0"+
    "\205\7\6\0\7\7\16\0\46\7\12\0\66\7\11\0\1\7\17\0"+
    "\30\7\11\0\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0"+
    "\7\7\1\0\7\7\1\0\7\7\1\0\7\7\1\0\40\7\57\0"+
    "\1\7\u01d5\0\3\7\31\0\17\7\1\0\5\7\2\0\5\7\4\0"+
    "\126\7\2\0\2\7\2\0\3\7\1\0\132\7\1\0\4\7\5\0"+
    "\51\7\3\0\136\7\21\0\33\7\65\0\20\7\u0200\0\u19b6\7\112\0"+
    "\u51cc\7\64\0\u048d\7\103\0\56\7\2\0\u010d\7\3\0\34\7\24\0"+
    "\60\7\14\0\2\7\1\0\31\7\10\0\122\7\45\0\11\7\2\0"+
    "\147\7\2\0\4\7\1\0\2\7\16\0\12\7\120\0\56\7\20\0"+
    "\1\7\7\0\64\7\14\0\105\7\13\0\12\7\6\0\30\7\3\0"+
    "\1\7\4\0\56\7\2\0\44\7\14\0\35\7\3\0\101\7\16\0"+
    "\13\7\46\0\67\7\11\0\16\7\2\0\12\7\6\0\27\7\3\0"+
    "\2\7\4\0\103\7\30\0\3\7\43\0\6\7\2\0\6\7\2\0"+
    "\6\7\11\0\7\7\1\0\7\7\221\0\53\7\1\0\2\7\2\0"+
    "\12\7\6\0\u2ba4\7\14\0\27\7\4\0\61\7\u2104\0\u012e\7\2\0"+
    "\76\7\2\0\152\7\46\0\7\7\14\0\5\7\5\0\14\7\1\0"+
    "\15\7\1\0\5\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0"+
    "\154\7\41\0\u016b\7\22\0\100\7\2\0\66\7\50\0\15\7\3\0"+
    "\20\7\20\0\7\7\14\0\2\7\30\0\3\7\31\0\1\7\6\0"+
    "\5\7\1\0\207\7\2\0\1\7\4\0\1\7\13\0\12\7\7\0"+
    "\32\7\4\0\1\7\1\0\32\7\13\0\131\7\3\0\6\7\2\0"+
    "\6\7\2\0\6\7\2\0\3\7\3\0\2\7\3\0\2\7\22\0"+
    "\3\7\4\0\14\7\1\0\32\7\1\0\23\7\1\0\2\7\1\0"+
    "\17\7\2\0\16\7\42\0\173\7\105\0\65\7\210\0\1\7\202\0"+
    "\35\7\3\0\61\7\57\0\37\7\21\0\33\7\65\0\36\7\2\0"+
    "\44\7\4\0\10\7\1\0\5\7\52\0\236\7\2\0\12\7\u0356\0"+
    "\6\7\2\0\1\7\1\0\54\7\1\0\2\7\3\0\1\7\2\0"+
    "\27\7\252\0\26\7\12\0\32\7\306\0\4\7\1\0\2\7\5\0"+
    "\10\7\1\0\3\7\1\0\33\7\4\0\3\7\4\0\1\7\40\0"+
    "\35\7\203\0\66\7\12\0\26\7\12\0\23\7\215\0\111\7\u03b7\0"+
    "\107\7\37\0\12\7\20\0\73\7\2\0\1\7\u0f42\0\u036f\7\221\0"+
    "\143\7\u0b9d\0\u042f\7\u33d1\0\u0239\7\u45c7\0\2\7\u2163\0\5\7\3\0"+
    "\26\7\2\0\7\7\36\0\4\7\224\0\3\7\u01bb\0\125\7\1\0"+
    "\107\7\1\0\2\7\2\0\1\7\2\0\2\7\2\0\4\7\1\0"+
    "\14\7\1\0\1\7\1\0\7\7\1\0\101\7\1\0\4\7\2\0"+
    "\10\7\1\0\7\7\1\0\34\7\1\0\4\7\1\0\5\7\1\0"+
    "\1\7\3\0\7\7\1\0\u0154\7\2\0\31\7\1\0\31\7\1\0"+
    "\37\7\1\0\31\7\1\0\37\7\1\0\31\7\1\0\37\7\1\0"+
    "\31\7\1\0\37\7\1\0\31\7\1\0\10\7\2\0\62\7\u2800\0"+
    "\ua6d7\7\51\0\u1035\7\13\0\336\7\u3fe2\0\u021e\7\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\7\36\0\140\7\200\0\360\7\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\1\4\1\5\2\6"+
    "\1\7\1\10\1\11\1\12\14\4\1\13\1\14\1\15"+
    "\1\16\1\2\1\0\13\4\1\17\6\4\2\0\11\4"+
    "\1\20\1\4\1\21\6\4\1\0\1\2\5\4\1\22"+
    "\1\4\1\23\1\24\1\25\1\26\5\4\1\27\6\4"+
    "\1\30\1\4\1\31\1\32\1\4\1\33\1\34\1\35"+
    "\2\4\1\36\1\4\1\37\1\40\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\116\0\234\0\116\0\303"+
    "\0\352\0\116\0\u0111\0\116\0\116\0\116\0\116\0\u0138"+
    "\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249\0\u0270"+
    "\0\u0297\0\u02be\0\u02e5\0\116\0\116\0\116\0\116\0\u030c"+
    "\0\u0333\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444"+
    "\0\u046b\0\u0492\0\u04b9\0\u04e0\0\303\0\u0507\0\u052e\0\u0555"+
    "\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666\0\u068d"+
    "\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u0777\0\303\0\u079e"+
    "\0\303\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861\0\u0888\0\u08af"+
    "\0\u05f1\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\303\0\u0999"+
    "\0\303\0\303\0\303\0\303\0\u09c0\0\u09e7\0\u0a0e\0\u0a35"+
    "\0\u0a5c\0\303\0\u0a83\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46"+
    "\0\303\0\u0b6d\0\303\0\303\0\u0b94\0\303\0\303\0\303"+
    "\0\u0bbb\0\u0be2\0\303\0\u0c09\0\303\0\303\0\303";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\10\1\22\1\23\1\10\1\24\1\25\1\10\1\26"+
    "\1\27\1\10\1\30\1\31\2\10\1\32\1\33\2\10"+
    "\1\34\1\35\1\36\1\37\47\3\51\0\1\5\50\0"+
    "\1\40\1\41\47\0\5\10\4\0\24\10\12\0\5\11"+
    "\4\0\24\11\15\0\2\13\42\0\5\10\4\0\1\10"+
    "\1\42\11\10\1\43\10\10\12\0\5\10\4\0\4\10"+
    "\1\44\17\10\12\0\5\10\4\0\6\10\1\45\15\10"+
    "\12\0\5\10\4\0\1\10\1\46\3\10\1\47\16\10"+
    "\12\0\5\10\4\0\15\10\1\50\4\10\1\51\1\10"+
    "\12\0\5\10\4\0\4\10\1\52\12\10\1\53\4\10"+
    "\12\0\5\10\4\0\7\10\1\54\10\10\1\55\3\10"+
    "\12\0\5\10\4\0\13\10\1\56\10\10\12\0\5\10"+
    "\4\0\13\10\1\57\1\10\1\60\6\10\12\0\5\10"+
    "\4\0\4\10\1\61\17\10\12\0\5\10\4\0\2\10"+
    "\1\62\21\10\12\0\5\10\4\0\22\10\1\63\1\10"+
    "\4\0\1\40\1\4\1\5\44\40\5\64\1\65\41\64"+
    "\6\0\5\10\4\0\2\10\1\66\21\10\12\0\5\10"+
    "\4\0\7\10\1\67\14\10\12\0\5\10\4\0\7\10"+
    "\1\70\14\10\12\0\5\10\4\0\2\10\1\71\12\10"+
    "\1\72\6\10\12\0\5\10\4\0\3\10\1\73\20\10"+
    "\12\0\5\10\4\0\6\10\1\74\15\10\12\0\5\10"+
    "\4\0\17\10\1\75\4\10\12\0\5\10\4\0\11\10"+
    "\1\76\12\10\12\0\5\10\4\0\21\10\1\77\2\10"+
    "\12\0\5\10\4\0\1\10\1\100\22\10\12\0\5\10"+
    "\4\0\6\10\1\101\15\10\12\0\5\10\4\0\11\10"+
    "\1\102\12\10\12\0\5\10\4\0\13\10\1\103\10\10"+
    "\12\0\5\10\4\0\4\10\1\104\17\10\12\0\5\10"+
    "\4\0\6\10\1\105\15\10\12\0\5\10\4\0\1\10"+
    "\1\106\22\10\12\0\5\10\4\0\11\10\1\107\12\10"+
    "\4\0\5\64\1\110\45\64\1\111\1\110\41\64\6\0"+
    "\5\10\4\0\3\10\1\112\20\10\12\0\5\10\4\0"+
    "\6\10\1\113\15\10\12\0\5\10\4\0\16\10\1\114"+
    "\5\10\12\0\5\10\4\0\6\10\1\115\15\10\12\0"+
    "\5\10\4\0\11\10\1\116\12\10\12\0\5\10\4\0"+
    "\4\10\1\117\17\10\12\0\5\10\4\0\4\10\1\120"+
    "\17\10\12\0\5\10\4\0\4\10\1\121\17\10\12\0"+
    "\5\10\4\0\3\10\1\122\20\10\12\0\5\10\4\0"+
    "\1\10\1\123\22\10\12\0\5\10\4\0\10\10\1\124"+
    "\13\10\12\0\5\10\4\0\1\10\1\125\22\10\12\0"+
    "\5\10\4\0\2\10\1\126\21\10\12\0\5\10\4\0"+
    "\17\10\1\127\4\10\12\0\5\10\4\0\3\10\1\130"+
    "\20\10\12\0\5\10\4\0\1\10\1\131\22\10\4\0"+
    "\4\64\1\5\1\110\41\64\6\0\5\10\4\0\3\10"+
    "\1\132\20\10\12\0\5\10\4\0\11\10\1\133\12\10"+
    "\12\0\5\10\4\0\6\10\1\134\15\10\12\0\5\10"+
    "\4\0\11\10\1\135\12\10\12\0\5\10\4\0\7\10"+
    "\1\136\14\10\12\0\5\10\4\0\7\10\1\137\14\10"+
    "\12\0\5\10\4\0\4\10\1\140\17\10\12\0\5\10"+
    "\4\0\23\10\1\141\12\0\5\10\4\0\15\10\1\142"+
    "\6\10\12\0\5\10\4\0\4\10\1\143\17\10\12\0"+
    "\5\10\4\0\4\10\1\144\17\10\12\0\5\10\4\0"+
    "\7\10\1\145\14\10\12\0\5\10\4\0\22\10\1\146"+
    "\1\10\12\0\5\10\4\0\1\147\23\10\12\0\5\10"+
    "\4\0\16\10\1\150\5\10\12\0\5\10\4\0\10\10"+
    "\1\151\13\10\12\0\5\10\4\0\2\10\1\152\21\10"+
    "\12\0\5\10\4\0\7\10\1\153\14\10\12\0\5\10"+
    "\4\0\17\10\1\154\4\10\12\0\5\10\4\0\3\10"+
    "\1\155\20\10\12\0\5\10\4\0\7\10\1\156\14\10"+
    "\12\0\5\10\4\0\4\10\1\157\17\10\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3120];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\4\11\14\1\4\11\1\1\1\0\22\1\2\0"+
    "\22\1\1\0\47\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[111];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	StringBuffer string = new StringBuffer();
	private Token symbol(int type, String tag) {
		return new Token(type, tag, yyline, yycolumn);
	}
	private Token symbol(int type, String tag, String value) {
		return new Token(type, tag, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { throw new Error("Illegal character <"+
		yytext()+">");
          }
        case 34: break;
        case 2: 
          { /* ignore */
          }
        case 35: break;
        case 3: 
          { return symbol(sym.MULTIPLY, "*", yytext());
          }
        case 36: break;
        case 4: 
          { return symbol(sym.ID, "ID", yytext());
          }
        case 37: break;
        case 5: 
          { return symbol(sym.CLASS_ID, "CLASS_ID", yytext());
          }
        case 38: break;
        case 6: 
          { return symbol(sym.NUM, "INTEGER", yytext());
          }
        case 39: break;
        case 7: 
          { return symbol(sym.OPENPARENTEHSIS, "(", yytext());
          }
        case 40: break;
        case 8: 
          { return symbol(sym.CLOSEPARENTHESIS, ")", yytext());
          }
        case 41: break;
        case 9: 
          { return symbol(sym.COLON, ":", yytext());
          }
        case 42: break;
        case 10: 
          { return symbol(sym.SEMI, ";", yytext());
          }
        case 43: break;
        case 11: 
          { return symbol(sym.EQ, "=", yytext());
          }
        case 44: break;
        case 12: 
          { return symbol(sym.PLUS, "+", yytext());
          }
        case 45: break;
        case 13: 
          { return symbol(sym.MINUS, "-", yytext());
          }
        case 46: break;
        case 14: 
          { return symbol(sym.DIVIDE, "\\", yytext());
          }
        case 47: break;
        case 15: 
          { return symbol(sym.IF, "if", yytext());
          }
        case 48: break;
        case 16: 
          { return symbol(sym.NEW, "new", yytext());
          }
        case 49: break;
        case 17: 
          { return symbol(sym.INT, "int", yytext());
          }
        case 50: break;
        case 18: 
          { return symbol(sym.ELSE, "else", yytext());
          }
        case 51: break;
        case 19: 
          { return symbol(sym.TRUE, "true", yytext());
          }
        case 52: break;
        case 20: 
          { return symbol(sym.THIS, "this", yytext());
          }
        case 53: break;
        case 21: 
          { return symbol(sym.NULL, "null", yytext());
          }
        case 54: break;
        case 22: 
          { return symbol(sym.VOID, "void", yytext());
          }
        case 55: break;
        case 23: 
          { return symbol(sym.CLASS, "class", yytext());
          }
        case 56: break;
        case 24: 
          { return symbol(sym.BREAK, "break", yytext());
          }
        case 57: break;
        case 25: 
          { return symbol(sym.FALSE, "false", yytext());
          }
        case 58: break;
        case 26: 
          { return symbol(sym.WHILE, "while", yytext());
          }
        case 59: break;
        case 27: 
          { return symbol(sym.LENGTH, "length", yytext());
          }
        case 60: break;
        case 28: 
          { return symbol(sym.STATIC, "static", yytext());
          }
        case 61: break;
        case 29: 
          { return symbol(sym.STRING, "string", yytext());
          }
        case 62: break;
        case 30: 
          { return symbol(sym.RETURN, "return", yytext());
          }
        case 63: break;
        case 31: 
          { return symbol(sym.EXTENDS, "extends", yytext());
          }
        case 64: break;
        case 32: 
          { return symbol(sym.BOOLEAN, "boolean", yytext());
          }
        case 65: break;
        case 33: 
          { return symbol(sym.CONTINUE, "continue", yytext());
          }
        case 66: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   	return new Token(sym.EOF, "EOF", 0 , 0);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
